## Welcome Back!
Welcome back.  I hope everybody had a nice vacation.  We'll have a lot to prepare for by June, so let's get started, shall we?  To get back into the swing of things, we'll revisit Susannah's flightmap assignment using object oriented javascript. 

### Instructions on Linux
First to download the project, open a terminal on your VM, move to a directory where you want to store your folder, and enter the following commands.

```
$ git clone https://github.com/benhaynor/seatmapjs
```

To start the server, enter the following

```
$ cd WelcomeBack
$ dev_appserver.py .
```

The command dev_appserver.py replaces the Google App Engine launcher that you may be familiar with from windows. You should now be able to browse to a nearly blank page by opening a browser and navigating to [http://localhost:8000](http://localhost:8000).

We'll be adding a few features to the seatmap that we worked on last semester.  To get a reminder of what we implemented, visit: [this google doc](https://docs.google.com/document/d/1gd4rXCZBkmmFetru-ujxYTomVgNChCFfySLks__gcBU/edit).  Or to see the app in action, check out [http://mesttech2014.appspot.com](http://mesttech2014.appspot.com/)

### Instructions on Windows


Your program will be graded on both functionality and style.  The functionality is captured in the following unit tests.

####test_ids
Each seat on the airplane should be represented as a div.  The divs should have ids 1aOut, 1bOut, 1cOut, 1dOut, 2aOut, 2bOut, ..., 18aOut, 18bOut.  1aReturn, 1bReturn, 1cReturn, 1dReturn, ... 18aReturn, 18bReturn.

####test_json
After initialization, your window should contain two objects, airplaneOut, and airplaneReturn attached to the window.  The airplane objects should have a method tojson() which returns a 2d array of passenger names.  If the plane is empty, it should return the array
[["","","",""],
["","","",""],
...
["",""]]

####test_seating
When a user clicks on a seat, they should be prompted to enter the name of a passenger.  This name should be stored by the airplane object.  After entering Ben into seat 1a, Rowdy into seat 2b, airplane.tojson() should return:
[["Ben","","",""],
["","Rowdy","",""],
...
["",""]]

####test_no_fly_list_with_terrorist
When a user clicks on the reserveSeatsButton, you should send an ajax call to the server with a passenger list.  The server should read the json and check it against an internal terrorist watch list.  If there is a terrorist on the plane list, the browser should alert "Alert the Authorities!".  This test tries to put "Osama Bin Laden" in seat 1a.

####test_no_fly_list_with_no_terrorist
Similar to the above test.  After entering "Harmless Ben" into the terrorist watch list, and submitting an ajax request to the server, the browser should pop up an alert with the message "Enjoy your flight!".
